<launch>
  <!-- The package has 2 examples of converting joystick commands to servo commands.
       This is the higher-latency, Python-based teleop_tools example.
       You can modify it in your own package for your own type of gamepad or joystick.
       We do plan to accept pull requests of config files for other controller types using this method.
  -->

  <!-- <node name="servo_server" pkg="moveit_servo" type="servo_server" output="screen" >
    <param name="parameter_ns" type="string" value="servo_server" />
    <rosparam ns="servo_server" command="load" file="$(find abb_irb120_jog)/config/jog_config.yaml" />
  </node> -->

  <!-- teleop_tools translates a joystick command into a twist message -->

  <!-- <param name="joy_node/dev" type="string" value="/dev/input/js1"/>
  <node name="joy_node" pkg="joy" type="joy_node" output="screen" ></node> -->


  <arg name="joy_dev" default="/dev/input/js1" />
  <arg name="config_filepath" default="$(find abb_irb120_jog)/config/joystick_config.yaml" />
  <arg name="joy_topic" default="joy" />

  <node pkg="joy" type="joy_node" name="joy_node">
    <param name="dev" value="$(arg joy_dev)" />
    <param name="deadzone" value="0.3" />
    <param name="autorepeat_rate" value="20" />
    <remap from="joy" to="$(arg joy_topic)" />
  </node>

  <node pkg="teleop_twist_joy" name="teleop_twist_joy" type="teleop_node">
    <rosparam command="load" file="$(arg config_filepath)" />
    <remap from="joy" to="$(arg joy_topic)" />
  </node>
</launch>
